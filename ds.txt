 Experiment 1:  Write a program to store the elements in 1-D array and perform   the operations like  
searching, sorting and reversing the elements. [Menu Driven]. 
 Program: 
  #include <iostream.h> 
  #include <conio.h> 
    void disp(int arr[], int size); 
    void sort(int arr[], int size); 
    void reverse(int arr[], int size); 
    void search(int arr[], int val, int size); 
       int main() { 
clrscr();  
    int size, val; 
    cout << "Enter the size of array : "; 
    cin >> size; 
    int arr[20]; 
    cout << "Enter the elements of the array:" << endl; 
   for (int i = 0; i < size; i++) { 
        cin >> arr[i]; 
    } 
int ch; 
    do { 
        cout << "\n****Main Menu****\n"; 
        cout << "1. Display\n"; 
        cout << "2. Sorting\n"; 
        cout << "3. Reverse\n"; 
        cout << "4. Search\n"; 
        cout << "Enter your Choice : "; 
        cin >> ch; 
        switch (ch) { 
            case 1: 
                disp(arr, size); 
		 break; 
            case 2: 
                sort(arr, size); 
                break; 
            case 3: 
                reverse(arr, size); 
                break; 
            case 4: 
                cout << "Enter value to be search : "; 
                cin >> val; 
                search(arr, val, size); 
                break; 
            default: 
                cout << "Invalid choice!\n"; 
        } 
      } while (ch != 4); 
       getch();  
       return 0; 
    } 
      void search(int arr[], int val, int size) { 
       int i;
       for (i = 0; i < size; i++) { 
        if (arr[i] == val) { 
            cout << "Value is found at position " << i << "." << endl; 
            return; 
        } 
    } 
    cout << "Value is not found." << endl; 
      } 
    void disp(int arr[], int size) { 
    cout << "Given Array :\n"; 
    for (int i = 0; i < size; i++) { 
        cout << arr[i] << endl; 
        } 
     } 
      void sort(int arr[], int size) { 
       int i, j;  
       for (i = 0; i < size; i++) { 
        for (j = 0; j < size - i - 1; j++) { 
            if (arr[j] > arr[j + 1]) { 
                int temp = arr[j]; 
                arr[j] = arr[j + 1]; 
                arr[j + 1] = temp; 
               } 
          } 
      } 
    cout << "Sorted Array : \n"; 
    for (i = 0; i < size; i++) { 
        cout << arr[i] << endl; 
       } 
    } 
    void reverse(int arr[], int size) { 
    int i = 0, j = size - 1; 
    while (i < j) { 
        int temp = arr[i]; 
        arr[i] = arr[j]; 
        arr[j] = temp; 
        i++; 
        j--; 
     } 
    cout << "Reverse order : \n"; 
   { 
        cout << arr[i] << endl; 
           } 
      }
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


Experiment 2:  Write a program to read the two arrays from the user and merge them and display the 
elements in sorted order [Menu Driven]. 
Program: 
   #include <iostream.h> 
   #include <conio.h> 
int main() { 
     int arr1[20], arr2[20], arr3[40]; 
     int i, j, k, size1, size2, temp; 
     clrscr(); 
    cout << "Enter the array size of array 1 :"; 
    cin >> size1; 
    cout << "Enter the element in array 1 :\n"; 
    for (i = 0; i < size1; i++) { 
        cin >> arr1[i]; 
    } 
    cout << "Enter the size of array 2 : "; 
    cin >> size2; 
    cout << "Enter the element in array 2 : \n"; 
    for (j = 0; j < size2; j++) { 
        cin >> arr2[j]; 
    } 
    for (i = 0; i < size1; i++) { 
        for (j = 0; j < size1 - i - 1; j++) { 
            if (arr1[j] > arr1[j + 1]) { 
                temp = arr1[j]; 
                arr1[j] = arr1[j + 1]; 
                arr1[j + 1] = temp; 
            } 
        } 
    } 
    for (i = 0; i < size2; i++) { 
        for (j = 0; j < size2 - i - 1; j++) { 
            if (arr2[j] > arr2[j + 1]) { 
                temp = arr2[j]; 
                arr2[j] = arr2[j + 1]; 
                arr2[j + 1] = temp; 
            } 
        } 
    } 
    i = 0; 
    j = 0; 
    k = 0; 
    while (i < size1 && j < size2) { 
        if (arr1[i] < arr2[j]) { 
            arr3[k] = arr1[i]; 
            i++; 
            k++; 
        } else { 
            arr3[k] = arr2[j]; 
            j++; 
            k++; 
        }
	    } 
    while (i < size1) { 
        arr3[k] = arr1[i]; 
        i++; 
        k++; 
    } 
    while (j < size2) { 
        arr3[k] = arr2[j]; 
        j++; 
        k++; 
    } 
    cout << "Merged array :\n"; 
    for (k = 0; k < size1 + size2; k++) { 
        cout << arr3[k] << endl; 
      } 
        getch();  
        return 0; 
  } 

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Experiment 3 : Write a program to perform the Matrix addition, Multiplication and Transpose 
Operation. [Menu Driven]. 
 Program: 
 #include <iostream.h> 
 #include <conio.h> 
 
  void matrixAddition(int A[][100], int B[][100], int result[][100], int rows, int cols); 
  void matrixMultiplication(int A[][100], int B[][100], int result[][100], int rows1, int cols1, int cols2); 
  void matrixTranspose(int A[][100], int transpose[][100], int rows, int cols); 
  void matrixAddition(int A[][100], int B[][100], int result[][100], int rows, int cols) { 
    for(int i = 0; i < rows; ++i) { 
        for(int j = 0; j < cols; ++j) { 
            result[i][j] = A[i][j] + B[i][j]; 
               }  
            } 
      } 
     void matrixMultiplication(int A[][100], int B[][100], int result[][100], int rows1, int cols1, int cols2) { 
         for(int i = 0; i < rows1; ++i) { 
         for(int j = 0; j < cols2; ++j) { 
            result[i][j] = 0; 
            for(int k = 0; k < cols1; ++k) { 
                result[i][j] += A[i][k] * B[k][j]; 
                } 
            } 
         } 
     } 
      void matrixTranspose(int A[][100], int transpose[][100], int rows, int cols) { 
       for(int i = 0; i < rows; ++i) { 
        for(int j = 0; j < cols; ++j) { 
            transpose[j][i] = A[i][j]; 
            } 
       } 
     } 
    void main() { 
        int choice, rows1, cols1, rows2, cols2; 
        int A[100][100], B[100][100], result[100][100], transpose[100][100]; 
            clrscr(); 
      cout << "Enter the number of rows and columns of first matrix: "; 
      cin >> rows1 >> cols1; 
      cout << "Enter elements of first matrix:" << endl; 
      for(int i = 0; i < rows1; ++i) { 
        for(int j = 0; j < cols1; ++j) { 
            cin >> A[i][j]; 
          } 
       } 
    cout << "Enter the number of rows and columns of second matrix: "; 
    cin >> rows2 >> cols2; 
    cout << "Enter elements of second matrix:" << endl; 
    for(i=0; i < rows2; ++i) {
     for(int j = 0; j < cols2; ++j) { 
            cin >> B[i][j]; 
        } 
    } 
    do { 
        clrscr(); 
        cout << "\nMENU\n"; 
        cout << "1. Add Matrices\n"; 
        cout << "2. Multiply Matrices\n"; 
        cout << "3. Transpose Matrix\n"; 
        cout << "4. Exit\n"; 
        cout << "Enter your choice: "; 
        cin >> choice; 
        switch(choice) { 
            case 1: 
                if(rows1 == rows2 && cols1 == cols2) { 
                    matrixAddition(A, B, result, rows1, cols1); 
                    cout << "Result of addition:" << endl; 
                    for(int i = 0; i < rows1; ++i) { 
                        for(int j = 0; j < cols1; ++j) { 
                            cout << result[i][j] << " "; 
                        } 
                        cout << endl; 
                    } 
                } else { 
                    cout << "Matrix addition is not possible. The matrices must have the same dimensions." << endl; 
                } 
                break; 
            case 2: 
                if(cols1 == rows2) { 
                    matrixMultiplication(A, B, result, rows1, cols1, cols2); 
                    cout << "Result of multiplication:" << endl; 
                    for(int i = 0; i < rows1; ++i) { 
                        for(int j = 0; j < cols2; ++j) { 
                            cout << result[i][j] << " "; 
                        } 
                        cout << endl; 
                    } 
                } else { 
             cout << "Matrix multiplication is not possible. Number of columns of first matrix must be equal to     
the number of rows of second matrix." << endl; 
                } 
                break; 
            case 3: 
                cout << "Transpose of first matrix:" << endl; 
                matrixTranspose(A, transpose, rows1, cols1); 
                for(int i = 0; i < cols1; ++i) { 
                    for(int j = 0; j < rows1; ++j) { 
                        cout << transpose[i][j] << " "; 
		}
		  cout << endl; 
                } 
                break; 
            case 4: 
                cout << "Exiting..."; 
                break; 
            default: 
                cout << "Invalid choice. Please enter a valid choice (1-4)." << endl; 
        } 
       getch(); 
    } while(choice != 4); 
     getch(); 
  }

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Experiment 4 : Write a program to create a single linked list and display the node elements in reverse 
order. 
 Program : 
  #include <iostream.h> 
  #include <conio.h> 
   struct Node { 
    int info; 
    Node* next; 
  }; 
     Node* create(Node* start) { 
     Node* new_node = NULL; 
     Node* temp = NULL; 
    int val; 
    cout << "Enter -1 value to exit list.\n"; 
    cout << "Enter the value : \n"; 
    cin >> val; 
    while (val != -1) { 
        new_node = new Node; 
        new_node->info = val; 
        if (start == NULL) { 
            start = new_node; 
            new_node->next = NULL; 
        } 
        else { 
            temp = start; 
            while (temp->next != NULL) { 
                temp = temp->next; 
            } 
            temp->next = new_node; 
            new_node->next = NULL; 
        } 
        cout << "Enter the value : \n"; 
        cin >> val; 
    } 
    cout << "List is successfully created.\n"; 
    return start; 
  } 
 
    Node* display(Node* start) { 
    Node* temp = start; 
    cout << "List is :\n"; 
    while (temp != NULL) { 
        cout << temp->info << "\t"; 
        temp = temp->next; 
    } 
    return start; 
  } 
  void reverse(Node* start) { 
    Node* prev = NULL; 
    Node* current = start; 
    Node* next_node; 
    while (current != NULL) { 
       
        next_node = current->next; 
        current->next = prev; 
        prev = current; 
        current = next_node; 
    } 
    start = prev; 
    display(start); 
  } 
int main() { 
    Node* start = NULL; 
    start = create(start); 
    start = display(start); 
    cout << "\n"; 
    cout << "Reverse \t"; 
    reverse(start); 
    getch(); 
    return 0; 
  } 
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


Experiment 5 :  Write a program to search the elements in the linked list and display the same. 
Program: 
  #include<iostream.h> 
  #include<conio.h> 
class Node { 
            public: 
            int info; 
            Node* next; 
           Node(int val) : info(val), next(NULL) {} 
         }; 
    class LinkedList { 
    private: 
                 Node* start; 
    public: 
                 LinkedList() : start(NULL) {} 
        Node* create() { 
        Node* new_node = NULL; 
        Node* temp = NULL; 
        int val; 
        cout << "Enter -1 value to exit list.\n"; 
        cout << "Enter the value : \n"; 
        cin >> val; 
        while (val != -1) { 
            new_node = new Node(val); 
            if (start == NULL) { 
                start = new_node; 
            } else { 
                temp = start; 
                while (temp->next != NULL) { 
                    temp = temp->next; 
                } 
                temp->next = new_node; 
            } 
            cout << "Enter the value : \n"; 
            cin >> val; 
        } 
        cout << "List is successfully created.\n"; 
        return start; 
    } 
    void display(Node* start) { 
        Node* temp = start; 
        cout << "List is :\n"; 
        while (temp != NULL) { 
            cout << temp->info << "\t"; 
            temp = temp->next; 
        } 
    } 
    Node* search(Node* start) { 
        int val, count = 1; 
        Node* temp = start; 
        cout << "\nWhich value are you looking for?\n"; 
        cin >> val; 
        while (temp != NULL && temp->info != val) { 
            temp = temp->next; 
            count++; 
        } 
        if (temp == NULL) { 
            cout << "Value not found\n"; 
        } else { 
            cout << "Value found at " << count << " node\n"; 
        } 
        return start; 
         } 
     }; 
    int main() { 
    LinkedList list; 
    Node* start = list.create(); 
    list.display(start); 
    cout << "\n"; 
     list.search(start); 
       return 0; 
    }


----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


Experiment 6 :  Write a program to create double linked list and sort the elements in the linked list. 
Program:  
  #include <iostream.h> 
class Node { 
    public: 
                int data; 
    Node* next; 
    Node* prev; 
    Node(int val) : data(val), next(NULL), prev(NULL) {} 
  }; 
  class LinkedList { 
    private: 
                Node* start; 
    public: 
               LinkedList() : start(NULL) {} 
         Node* create() { 
         Node* new_node = NULL; 
         int val; 
         cout << "Enter the data or enter -1 to exit: "; 
         cin >> val; 
         while (val != -1) { 
            new_node = new Node(val); 
           if (start == NULL) { 
                start = new_node; 
            } else { 
                Node* temp = start; 
                while (temp->next != NULL) { 
                    temp = temp->next; 
                } 
                temp->next = new_node; 
                new_node->prev = temp; 
            } 
            cout << "Enter the data or enter -1 to exit: "; 
            cin >> val; 
        } 
        cout << "Linked list successfully created." << endl; 
        return start; 
    } 
    Node* display() { 
        Node* temp = start; 
        cout << "\nThe Linked list is: "; 
        while (temp != NULL) { 
            cout << temp->data << "\t"; 
            temp = temp->next; 
        } 
        cout << endl; 
        return start; 
    } 
    Node* sort() { 
        Node* temp1 = start; 
        while (temp1->next != NULL) { 
            Node* temp2 = start; 
	 while (temp2->next != NULL) { 
                Node* temp = temp2->next; 
                if (temp2->data > temp->data) { 
                    int x = temp->data; 
                    temp->data = temp2->data; 
                    temp2->data = x; 
                } 
                temp2 = temp2->next; 
            } 
            temp1 = temp1->next; 
        } 
        Node* temp = start; 
        cout << "The Linked List is: "; 
        while (temp != NULL) { 
            cout << temp->data << "\t"; 
            temp = temp->next; 
        } 
        cout << endl; 
        return start; 
    } 
  }; 
    int main() { 
    LinkedList list; 
    list.create(); 
    list.display(); 
    cout << "\nSorted list:\t"; 
    list.sort(); 
    return 0; 
  } 
